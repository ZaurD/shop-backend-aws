service: products-service

frameworkVersion: '3.28.1'

plugins:
  - serverless-auto-swagger
  - serverless-webpack
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-1
  environment:
    PRODUCTS_TABLE: products
    STOCKS_TABLE: stocks
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
        - sqs:*
      Resource: '*'

custom:
    autoswagger:
        apiType: 'http'
  
resources:
  Resources:
    CatalogItemsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: catalogItemsQueue
        
functions:
  getProductsList:
    handler: handler.getProductsList
    events:
      - http:
          method: get
          path: /products
          cors: true
          responseData: {
            200: {
              description: 'successful Api Response',
              bodyType: 'Product',
            },
            500: {
              description: 'An error occurred while retrieving products.',
            }
          }  

  getProductsById:
    handler: handler.getProductsById
    events:
      - http:
          path: products/{productId}
          cors: true
          method: get
          responseData: {
            200: {
              description: 'successful Api Response',
              bodyType: 'Product',
            },
            404: {
              description: 'Product not found'
            },
            500: {
              description: 'Error getting product'
            }
          }  

  createProduct:
    handler: handler.createProduct
    events:
      - http:
          path: products
          method: post
          cors: true
          responseData: {
            200: {
              description: 'Product created successfully',
              bodyType: 'Product',
            },
            400: {
              description: 'Error creating product, product data is invalid',
            },
            500: {
              description: 'Error creating product',
            }
          }
        
  catalogBatchProcess:
    handler: handler.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn: 
            Fn::GetAtt:
              - CatalogItemsQueue
              - Arn